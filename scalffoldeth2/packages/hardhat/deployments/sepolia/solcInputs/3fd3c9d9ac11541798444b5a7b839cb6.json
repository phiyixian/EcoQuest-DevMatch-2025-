{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/CeloBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./MockUSDC.sol\";\r\n\r\n/**\r\n * @title CeloBridge\r\n * @dev Manages cross-chain carbon offset transactions to Celo network\r\n * This contract handles USDC deposits and initiates bridging to Celo for carbon projects\r\n */\r\ncontract CeloBridge is Ownable {\r\n    MockUSDC public usdcToken;\r\n    \r\n    // Celo network configuration\r\n    address public celoRecipient; // Celo address that receives funds for carbon projects\r\n    uint256 public bridgeFee; // Fee for bridging (in basis points, e.g., 100 = 1%)\r\n    \r\n    // Transaction tracking\r\n    struct BridgeTransaction {\r\n        address user;\r\n        uint256 amount;\r\n        uint256 bridgeFee;\r\n        uint256 netAmount;\r\n        uint256 timestamp;\r\n        string purpose;\r\n        BridgeStatus status;\r\n        string celoTxHash; // Celo transaction hash (set by oracle/backend)\r\n    }\r\n    \r\n    enum BridgeStatus {\r\n        PENDING,\r\n        BRIDGED,\r\n        COMPLETED,\r\n        FAILED\r\n    }\r\n    \r\n    // Events\r\n    event BridgeInitiated(\r\n        uint256 indexed transactionId,\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 netAmount,\r\n        string purpose\r\n    );\r\n    \r\n    event BridgeCompleted(\r\n        uint256 indexed transactionId,\r\n        string celoTxHash\r\n    );\r\n    \r\n    event BridgeStatusUpdated(\r\n        uint256 indexed transactionId,\r\n        BridgeStatus status\r\n    );\r\n    \r\n    // Storage\r\n    mapping(uint256 => BridgeTransaction) public bridgeTransactions;\r\n    mapping(address => uint256[]) public userTransactions;\r\n    uint256 private _transactionIds;\r\n    uint256 public totalBridged;\r\n    \r\n    // Reentrancy guard\r\n    bool private _reentrancyGuard;\r\n    \r\n    modifier nonReentrant() {\r\n        require(!_reentrancyGuard, \"ReentrancyGuard: reentrant call\");\r\n        _reentrancyGuard = true;\r\n        _;\r\n        _reentrancyGuard = false;\r\n    }\r\n    \r\n    constructor(\r\n        address _usdcToken,\r\n        address _celoRecipient,\r\n        uint256 _bridgeFee\r\n    ) Ownable(msg.sender) {\r\n        usdcToken = MockUSDC(_usdcToken);\r\n        celoRecipient = _celoRecipient;\r\n        bridgeFee = _bridgeFee; // e.g., 50 = 0.5%\r\n    }\r\n    \r\n    /**\r\n     * @dev Initiate a bridge transaction to Celo network\r\n     * @param amount USDC amount to bridge\r\n     * @param purpose Purpose of the carbon offset\r\n     */\r\n    function initiateBridge(\r\n        uint256 amount,\r\n        string memory purpose\r\n    ) external nonReentrant returns (uint256) {\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(bytes(purpose).length > 0, \"Purpose required\");\r\n        \r\n        // Calculate bridge fee and net amount\r\n        uint256 feeAmount = (amount * bridgeFee) / 10000;\r\n        uint256 netAmount = amount - feeAmount;\r\n        \r\n        // Transfer USDC from user to this contract\r\n        bool success = usdcToken.transferFrom(msg.sender, address(this), amount);\r\n        require(success, \"USDC transfer failed\");\r\n        \r\n        // Create bridge transaction record\r\n        _transactionIds++;\r\n        uint256 transactionId = _transactionIds;\r\n        \r\n        bridgeTransactions[transactionId] = BridgeTransaction({\r\n            user: msg.sender,\r\n            amount: amount,\r\n            bridgeFee: feeAmount,\r\n            netAmount: netAmount,\r\n            timestamp: block.timestamp,\r\n            purpose: purpose,\r\n            status: BridgeStatus.PENDING,\r\n            celoTxHash: \"\"\r\n        });\r\n        \r\n        userTransactions[msg.sender].push(transactionId);\r\n        totalBridged += netAmount;\r\n        \r\n        emit BridgeInitiated(transactionId, msg.sender, amount, netAmount, purpose);\r\n        \r\n        // In a real implementation, here you would:\r\n        // 1. Lock the USDC tokens\r\n        // 2. Emit an event that a bridge oracle/relayer would listen to\r\n        // 3. The oracle would then mint equivalent tokens on Celo\r\n        // For this demo, we'll simulate immediate bridging\r\n        _simulateBridge(transactionId);\r\n        \r\n        return transactionId;\r\n    }\r\n    \r\n    /**\r\n     * @dev Simulate bridge completion (in production, this would be called by oracle)\r\n     */\r\n    function _simulateBridge(uint256 transactionId) private {\r\n        bridgeTransactions[transactionId].status = BridgeStatus.BRIDGED;\r\n        \r\n        // Simulate Celo transaction hash\r\n        string memory simulatedCeloTx = string(abi.encodePacked(\r\n            \"0xcelo\",\r\n            _uint2str(transactionId),\r\n            _uint2str(block.timestamp)\r\n        ));\r\n        \r\n        bridgeTransactions[transactionId].celoTxHash = simulatedCeloTx;\r\n        \r\n        emit BridgeCompleted(transactionId, simulatedCeloTx);\r\n        emit BridgeStatusUpdated(transactionId, BridgeStatus.BRIDGED);\r\n    }\r\n    \r\n    /**\r\n     * @dev Update bridge transaction status (called by oracle in production)\r\n     */\r\n    function updateBridgeStatus(\r\n        uint256 transactionId,\r\n        BridgeStatus status,\r\n        string memory celoTxHash\r\n    ) external onlyOwner {\r\n        require(transactionId > 0 && transactionId <= _transactionIds, \"Invalid transaction ID\");\r\n        \r\n        bridgeTransactions[transactionId].status = status;\r\n        if (bytes(celoTxHash).length > 0) {\r\n            bridgeTransactions[transactionId].celoTxHash = celoTxHash;\r\n        }\r\n        \r\n        emit BridgeStatusUpdated(transactionId, status);\r\n        if (bytes(celoTxHash).length > 0) {\r\n            emit BridgeCompleted(transactionId, celoTxHash);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Get user's bridge transaction history\r\n     */\r\n    function getUserTransactions(address user) external view returns (uint256[] memory) {\r\n        return userTransactions[user];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get bridge transaction details\r\n     */\r\n    function getBridgeTransaction(uint256 transactionId) external view returns (BridgeTransaction memory) {\r\n        require(transactionId > 0 && transactionId <= _transactionIds, \"Invalid transaction ID\");\r\n        return bridgeTransactions[transactionId];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get total number of bridge transactions\r\n     */\r\n    function getTotalTransactions() external view returns (uint256) {\r\n        return _transactionIds;\r\n    }\r\n    \r\n    /**\r\n     * @dev Update bridge fee (only owner)\r\n     */\r\n    function updateBridgeFee(uint256 newFee) external onlyOwner {\r\n        require(newFee <= 1000, \"Fee cannot exceed 10%\"); // Max 10%\r\n        bridgeFee = newFee;\r\n    }\r\n    \r\n    /**\r\n     * @dev Update Celo recipient address (only owner)\r\n     */\r\n    function updateCeloRecipient(address newRecipient) external onlyOwner {\r\n        require(newRecipient != address(0), \"Invalid recipient\");\r\n        celoRecipient = newRecipient;\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraw accumulated fees (only owner)\r\n     */\r\n    function withdrawFees(address to, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"Invalid recipient\");\r\n        bool success = usdcToken.transfer(to, amount);\r\n        require(success, \"Transfer failed\");\r\n    }\r\n    \r\n    /**\r\n     * @dev Emergency withdraw (only owner)\r\n     */\r\n    function emergencyWithdraw(address to, uint256 amount) external onlyOwner {\r\n        require(to != address(0), \"Invalid recipient\");\r\n        bool success = usdcToken.transfer(to, amount);\r\n        require(success, \"Transfer failed\");\r\n    }\r\n    \r\n    /**\r\n     * @dev Convert uint to string\r\n     */\r\n    function _uint2str(uint256 _i) internal pure returns (string memory) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 j = _i;\r\n        uint256 len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len;\r\n        while (_i != 0) {\r\n            k = k - 1;\r\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n"
    },
    "contracts/EcoQuestCollection.sol": {
      "content": "\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title EcoQuestCollection\r\n * @dev A simple contract to track collected NFTs for each user\r\n * This is not a full ERC721 implementation, but a tracking system for the game\r\n */\r\ncontract EcoQuestCollection {\r\n    struct CollectedNFT {\r\n        string name;\r\n        string image;\r\n        string rarity;\r\n        uint256 timestamp;\r\n        bool exists;\r\n    }\r\n    \r\n    // Mapping from user address to their collected NFTs\r\n    mapping(address => mapping(string => CollectedNFT)) public userCollections;\r\n    \r\n    // Mapping from user address to array of NFT names (for enumeration)\r\n    mapping(address => string[]) public userNFTList;\r\n    \r\n    // Mapping to track if a user has collected a specific NFT\r\n    mapping(address => mapping(string => bool)) public hasCollected;\r\n    \r\n    // Events\r\n    event NFTCollected(\r\n        address indexed user,\r\n        string indexed nftName,\r\n        string image,\r\n        string rarity,\r\n        uint256 timestamp\r\n    );\r\n    \r\n    /**\r\n     * @dev Collect an NFT for a user\r\n     * @param user The address of the user collecting the NFT\r\n     * @param name The name of the NFT\r\n     * @param image The image URL of the NFT\r\n     * @param rarity The rarity of the NFT\r\n     */\r\n    function collectNFT(\r\n        address user,\r\n        string memory name,\r\n        string memory image,\r\n        string memory rarity\r\n    ) external {\r\n        require(user != address(0), \"Invalid user address\");\r\n        require(bytes(name).length > 0, \"NFT name cannot be empty\");\r\n        require(!hasCollected[user][name], \"NFT already collected by user\");\r\n        \r\n        // Add to user's collection\r\n        userCollections[user][name] = CollectedNFT({\r\n            name: name,\r\n            image: image,\r\n            rarity: rarity,\r\n            timestamp: block.timestamp,\r\n            exists: true\r\n        });\r\n        \r\n        // Add to user's NFT list for enumeration\r\n        userNFTList[user].push(name);\r\n        \r\n        // Mark as collected\r\n        hasCollected[user][name] = true;\r\n        \r\n        emit NFTCollected(user, name, image, rarity, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * @dev Get a specific NFT from a user's collection\r\n     * @param user The user's address\r\n     * @param name The name of the NFT\r\n     * @return The NFT data\r\n     */\r\n    function getUserNFT(address user, string memory name) \r\n        external \r\n        view \r\n        returns (CollectedNFT memory) \r\n    {\r\n        require(hasCollected[user][name], \"NFT not collected by user\");\r\n        return userCollections[user][name];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get all NFT names collected by a user\r\n     * @param user The user's address\r\n     * @return Array of NFT names\r\n     */\r\n    function getUserNFTList(address user) \r\n        external \r\n        view \r\n        returns (string[] memory) \r\n    {\r\n        return userNFTList[user];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get the number of NFTs collected by a user\r\n     * @param user The user's address\r\n     * @return The count of collected NFTs\r\n     */\r\n    function getUserNFTCount(address user) \r\n        external \r\n        view \r\n        returns (uint256) \r\n    {\r\n        return userNFTList[user].length;\r\n    }\r\n    \r\n    /**\r\n     * @dev Check if a user has collected a specific NFT\r\n     * @param user The user's address\r\n     * @param name The name of the NFT\r\n     * @return True if the user has collected the NFT\r\n     */\r\n    function hasUserCollected(address user, string memory name) \r\n        external \r\n        view \r\n        returns (bool) \r\n    {\r\n        return hasCollected[user][name];\r\n    }\r\n    \r\n    /**\r\n     * @dev Get all collected NFTs for a user (with pagination)\r\n     * @param user The user's address\r\n     * @param offset Starting index\r\n     * @param limit Maximum number of NFTs to return\r\n     * @return Array of collected NFTs\r\n     */\r\n    function getUserNFTs(address user, uint256 offset, uint256 limit) \r\n        external \r\n        view \r\n        returns (CollectedNFT[] memory) \r\n    {\r\n        string[] memory nftNames = userNFTList[user];\r\n        uint256 total = nftNames.length;\r\n        \r\n        if (offset >= total) {\r\n            return new CollectedNFT[](0);\r\n        }\r\n        \r\n        uint256 end = offset + limit;\r\n        if (end > total) {\r\n            end = total;\r\n        }\r\n        \r\n        uint256 length = end - offset;\r\n        CollectedNFT[] memory result = new CollectedNFT[](length);\r\n        \r\n        for (uint256 i = 0; i < length; i++) {\r\n            string memory nftName = nftNames[offset + i];\r\n            result[i] = userCollections[user][nftName];\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}\r\n"
    },
    "contracts/MockUSDC.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/*Frontend tip:\r\n    Can make the user experience smoother by:\r\n    1. User only input donation amount once (not in both approve() and offset()\r\n            Asking the user for the donation amount once,\r\n            Then, in your frontend code, call approve(spender, amount) and\r\n            offset(amount) with the same value.\r\n    2. User nonid to input klimadao_contract address\r\n            Hardcode or configure the KlimadaoDonation contract address in your frontend code \r\n            (for example, in a config file or as a constant).*/\r\n\r\n/// @title MockUSDC - Simple ERC20 Token for Testing\r\ncontract MockUSDC {\r\n    string public name = \"Mock USDC\";\r\n    string public symbol = \"mUSDC\";\r\n    uint8 public decimals = 6;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    constructor(uint256 _initialSupply) {\r\n        totalSupply = _initialSupply;\r\n        balanceOf[msg.sender] = _initialSupply;\r\n        emit Transfer(address(0), msg.sender, _initialSupply);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\r\n        require(balanceOf[from] >= amount, \"Insufficient balance\");\r\n        require(allowance[from][msg.sender] >= amount, \"Allowance exceeded\");\r\n        balanceOf[from] -= amount;\r\n        balanceOf[to] += amount;\r\n        allowance[from][msg.sender] -= amount;\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    // Add a transfer function for completeness (optional but standard)\r\n    function transfer(address to, uint256 amount) external returns (bool) {\r\n        require(balanceOf[msg.sender] >= amount, \"Insufficient balance\");\r\n        balanceOf[msg.sender] -= amount;\r\n        balanceOf[to] += amount;\r\n        emit Transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}