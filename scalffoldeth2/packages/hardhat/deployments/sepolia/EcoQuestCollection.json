{
  "address": "0x22C7f48f89982a4d9c12257792bB6421FC4822Bc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "nftName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NFTCollected",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        }
      ],
      "name": "collectNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getUserNFT",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct EcoQuestCollection.CollectedNFT",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserNFTCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserNFTList",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getUserNFTs",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct EcoQuestCollection.CollectedNFT[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hasCollected",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "hasUserCollected",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "userCollections",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "image",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userNFTList",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6841937f41bca5b16ef41df8ad290c987273f8a69f2669d82eee1041a0580fbc",
  "receipt": {
    "to": null,
    "from": "0x2878e154820a6A6AE190109036266b02bA46DE05",
    "contractAddress": "0x22C7f48f89982a4d9c12257792bB6421FC4822Bc",
    "transactionIndex": 142,
    "gasUsed": "1277934",
    "logsBloom": "0x
    "blockHash": "0x445c80e88a54c4b55d7dc954d62afa9a6ac1ef437c4fef3cb9a946be841836a4",
    "transactionHash": "0x6841937f41bca5b16ef41df8ad290c987273f8a69f2669d82eee1041a0580fbc",
    "logs": [],
    "blockNumber": 8951294,
    "cumulativeGasUsed": "21722273",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "496b2371263bb80f5e1277e0675ff2b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NFTCollected\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"name\":\"collectNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getUserNFT\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct EcoQuestCollection.CollectedNFT\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserNFTCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserNFTList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getUserNFTs\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct EcoQuestCollection.CollectedNFT[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hasCollected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"hasUserCollected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userCollections\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userNFTList\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A simple contract to track collected NFTs for each user This is not a full ERC721 implementation, but a tracking system for the game\",\"kind\":\"dev\",\"methods\":{\"collectNFT(address,string,string,string)\":{\"details\":\"Collect an NFT for a user\",\"params\":{\"image\":\"The image URL of the NFT\",\"name\":\"The name of the NFT\",\"rarity\":\"The rarity of the NFT\",\"user\":\"The address of the user collecting the NFT\"}},\"getUserNFT(address,string)\":{\"details\":\"Get a specific NFT from a user's collection\",\"params\":{\"name\":\"The name of the NFT\",\"user\":\"The user's address\"},\"returns\":{\"_0\":\"The NFT data\"}},\"getUserNFTCount(address)\":{\"details\":\"Get the number of NFTs collected by a user\",\"params\":{\"user\":\"The user's address\"},\"returns\":{\"_0\":\"The count of collected NFTs\"}},\"getUserNFTList(address)\":{\"details\":\"Get all NFT names collected by a user\",\"params\":{\"user\":\"The user's address\"},\"returns\":{\"_0\":\"Array of NFT names\"}},\"getUserNFTs(address,uint256,uint256)\":{\"details\":\"Get all collected NFTs for a user (with pagination)\",\"params\":{\"limit\":\"Maximum number of NFTs to return\",\"offset\":\"Starting index\",\"user\":\"The user's address\"},\"returns\":{\"_0\":\"Array of collected NFTs\"}},\"hasUserCollected(address,string)\":{\"details\":\"Check if a user has collected a specific NFT\",\"params\":{\"name\":\"The name of the NFT\",\"user\":\"The user's address\"},\"returns\":{\"_0\":\"True if the user has collected the NFT\"}}},\"title\":\"EcoQuestCollection\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EcoQuestCollection.sol\":\"EcoQuestCollection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/EcoQuestCollection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title EcoQuestCollection\\n * @dev A simple contract to track collected NFTs for each user\\n * This is not a full ERC721 implementation, but a tracking system for the game\\n */\\ncontract EcoQuestCollection {\\n    struct CollectedNFT {\\n        string name;\\n        string image;\\n        string rarity;\\n        uint256 timestamp;\\n        bool exists;\\n    }\\n\\n    // Mapping from user address to their collected NFTs\\n    mapping(address => mapping(string => CollectedNFT)) public userCollections;\\n\\n    // Mapping from user address to array of NFT names (for enumeration)\\n    mapping(address => string[]) public userNFTList;\\n\\n    // Mapping to track if a user has collected a specific NFT\\n    mapping(address => mapping(string => bool)) public hasCollected;\\n\\n    // Events\\n    event NFTCollected(address indexed user, string indexed nftName, string image, string rarity, uint256 timestamp);\\n\\n    /**\\n     * @dev Collect an NFT for a user\\n     * @param user The address of the user collecting the NFT\\n     * @param name The name of the NFT\\n     * @param image The image URL of the NFT\\n     * @param rarity The rarity of the NFT\\n     */\\n    function collectNFT(address user, string memory name, string memory image, string memory rarity) external {\\n        require(user != address(0), \\\"Invalid user address\\\");\\n        require(bytes(name).length > 0, \\\"NFT name cannot be empty\\\");\\n        require(!hasCollected[user][name], \\\"NFT already collected by user\\\");\\n\\n        // Add to user's collection\\n        userCollections[user][name] = CollectedNFT({\\n            name: name,\\n            image: image,\\n            rarity: rarity,\\n            timestamp: block.timestamp,\\n            exists: true\\n        });\\n\\n        // Add to user's NFT list for enumeration\\n        userNFTList[user].push(name);\\n\\n        // Mark as collected\\n        hasCollected[user][name] = true;\\n\\n        emit NFTCollected(user, name, image, rarity, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get a specific NFT from a user's collection\\n     * @param user The user's address\\n     * @param name The name of the NFT\\n     * @return The NFT data\\n     */\\n    function getUserNFT(address user, string memory name) external view returns (CollectedNFT memory) {\\n        require(hasCollected[user][name], \\\"NFT not collected by user\\\");\\n        return userCollections[user][name];\\n    }\\n\\n    /**\\n     * @dev Get all NFT names collected by a user\\n     * @param user The user's address\\n     * @return Array of NFT names\\n     */\\n    function getUserNFTList(address user) external view returns (string[] memory) {\\n        return userNFTList[user];\\n    }\\n\\n    /**\\n     * @dev Get the number of NFTs collected by a user\\n     * @param user The user's address\\n     * @return The count of collected NFTs\\n     */\\n    function getUserNFTCount(address user) external view returns (uint256) {\\n        return userNFTList[user].length;\\n    }\\n\\n    /**\\n     * @dev Check if a user has collected a specific NFT\\n     * @param user The user's address\\n     * @param name The name of the NFT\\n     * @return True if the user has collected the NFT\\n     */\\n    function hasUserCollected(address user, string memory name) external view returns (bool) {\\n        return hasCollected[user][name];\\n    }\\n\\n    /**\\n     * @dev Get all collected NFTs for a user (with pagination)\\n     * @param user The user's address\\n     * @param offset Starting index\\n     * @param limit Maximum number of NFTs to return\\n     * @return Array of collected NFTs\\n     */\\n    function getUserNFTs(address user, uint256 offset, uint256 limit) external view returns (CollectedNFT[] memory) {\\n        string[] memory nftNames = userNFTList[user];\\n        uint256 total = nftNames.length;\\n\\n        if (offset >= total) {\\n            return new CollectedNFT[](0);\\n        }\\n\\n        uint256 end = offset + limit;\\n        if (end > total) {\\n            end = total;\\n        }\\n\\n        uint256 length = end - offset;\\n        CollectedNFT[] memory result = new CollectedNFT[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            string memory nftName = nftNames[offset + i];\\n            result[i] = userCollections[user][nftName];\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x2b1b6d1b79329e883f09ab1881fdc5b65144cc67bcb6b3bcde21c7ee6accb604\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "A simple contract to track collected NFTs for each user This is not a full ERC721 implementation, but a tracking system for the game",
    "kind": "dev",
    "methods": {
      "collectNFT(address,string,string,string)": {
        "details": "Collect an NFT for a user",
        "params": {
          "image": "The image URL of the NFT",
          "name": "The name of the NFT",
          "rarity": "The rarity of the NFT",
          "user": "The address of the user collecting the NFT"
        }
      },
      "getUserNFT(address,string)": {
        "details": "Get a specific NFT from a user's collection",
        "params": {
          "name": "The name of the NFT",
          "user": "The user's address"
        },
        "returns": {
          "_0": "The NFT data"
        }
      },
      "getUserNFTCount(address)": {
        "details": "Get the number of NFTs collected by a user",
        "params": {
          "user": "The user's address"
        },
        "returns": {
          "_0": "The count of collected NFTs"
        }
      },
      "getUserNFTList(address)": {
        "details": "Get all NFT names collected by a user",
        "params": {
          "user": "The user's address"
        },
        "returns": {
          "_0": "Array of NFT names"
        }
      },
      "getUserNFTs(address,uint256,uint256)": {
        "details": "Get all collected NFTs for a user (with pagination)",
        "params": {
          "limit": "Maximum number of NFTs to return",
          "offset": "Starting index",
          "user": "The user's address"
        },
        "returns": {
          "_0": "Array of collected NFTs"
        }
      },
      "hasUserCollected(address,string)": {
        "details": "Check if a user has collected a specific NFT",
        "params": {
          "name": "The name of the NFT",
          "user": "The user's address"
        },
        "returns": {
          "_0": "True if the user has collected the NFT"
        }
      }
    },
    "title": "EcoQuestCollection",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4542,
        "contract": "contracts/EcoQuestCollection.sol:EcoQuestCollection",
        "label": "userCollections",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(CollectedNFT)4535_storage))"
      },
      {
        "astId": 4547,
        "contract": "contracts/EcoQuestCollection.sol:EcoQuestCollection",
        "label": "userNFTList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 4553,
        "contract": "contracts/EcoQuestCollection.sol:EcoQuestCollection",
        "label": "hasCollected",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(CollectedNFT)4535_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => struct EcoQuestCollection.CollectedNFT))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(CollectedNFT)4535_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_struct(CollectedNFT)4535_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct EcoQuestCollection.CollectedNFT)",
        "numberOfBytes": "32",
        "value": "t_struct(CollectedNFT)4535_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CollectedNFT)4535_storage": {
        "encoding": "inplace",
        "label": "struct EcoQuestCollection.CollectedNFT",
        "members": [
          {
            "astId": 4526,
            "contract": "contracts/EcoQuestCollection.sol:EcoQuestCollection",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4528,
            "contract": "contracts/EcoQuestCollection.sol:EcoQuestCollection",
            "label": "image",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4530,
            "contract": "contracts/EcoQuestCollection.sol:EcoQuestCollection",
            "label": "rarity",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 4532,
            "contract": "contracts/EcoQuestCollection.sol:EcoQuestCollection",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4534,
            "contract": "contracts/EcoQuestCollection.sol:EcoQuestCollection",
            "label": "exists",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}